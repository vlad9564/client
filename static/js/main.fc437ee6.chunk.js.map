{"version":3,"sources":["images/404.png","components/Header/Header.tsx","components/Home/Home.tsx","components/Users/Users.jsx","components/Admin/Admin.tsx","components/PageNotFound/PageNotFound.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Home","query","ListOfUsers","useQuery","loading","error","data","users","map","id","name","age","key","Users","Admin","PageNotFound","cssStyel","text","fontFamily","fontSize","image","marginTop","style","src","_404","alt","height","Main","path","exact","component","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,iC,iPCSrCC,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaL,EAAMM,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,QAKf,SAASK,IACZ,IAAMC,EAAUX,EAAU,IAE1B,OACI,yBAAKY,UAAWD,EAAQP,MACpB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWD,EAAQL,WAAYY,MAAM,UAAUC,aAAW,QAC/E,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWD,EAAQF,OAA5C,UAGA,kBAACa,EAAA,EAAD,CAAQJ,MAAM,WAAd,W,oBClCPK,EAAiB,WAE1B,OACI,sC,QCDFC,EAAK,uqBAQX,SAASC,IAAe,IAAD,EACcC,YAASF,GAAlCG,EADW,EACXA,QAASC,EADE,EACFA,MAAOC,EADL,EACKA,KACxB,OAAIF,EAAgB,yCAChBC,EAAc,uCAIXC,EAAKC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,IAAb,OAClB,yBAAKC,IAAKH,GACN,2BACKC,EAAMC,OAOhB,SAASE,IACZ,OACI,6BACI,kBAACX,EAAD,OC5BL,IAAMY,EAAkB,WAC3B,OACI,oCACI,kBAACD,EAAD,Q,iBCJCE,EAAyB,WAClC,IAAMC,EAAW,CACbC,KAAM,CACFC,WAAY,+BACZC,SAAU,QAEdC,MAAO,CACHC,UAAW,SAGnB,OACI,6BACI,yBAAKC,MAAON,EAASC,MAArB,OAGA,yBAAKK,MAAON,EAASC,MAArB,kBAGA,yBAAKK,MAAON,EAASI,OACjB,yBAAKG,IAAKC,IAAMC,IAAI,OAAOC,OAAO,aCfrCC,EAAO,WAEhB,OACI,6BACI,kBAAC,IAAD,KACI,kBAACxC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOyC,KAAM,CAAC,IAAK,SAAUC,OAAK,EAACC,UAAW9B,IAC9C,kBAAC,IAAD,CAAO4B,KAAM,SAAUC,OAAK,EAACC,UAAWhB,IACxC,kBAAC,IAAD,CAAOc,KAAM,IAAKE,UAAWf,Q,gBCT3CgB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,gDAcQC,EAVO,WACpB,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,yBAAK1C,UAAU,OACb,kBAAC,EAAD,SCJY8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fc437ee6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/404.f356e41d.png\";","import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport function Header() {\r\n    const classes = useStyles({});\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Travel\r\n                     </Typography>\r\n                    <Button color=\"inherit\">Help</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nexport const Home: React.FC = () => {\r\n\r\n    return (\r\n        <div>\r\n            Home\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider, useQuery, useMutation, } from \"@apollo/react-hooks\";\r\nimport { loader } from 'graphql.macro';\r\nconst query = loader(\"./getUsers.graphql\");\r\n\r\n\r\n// const client = new ApolloClient({\r\n//     uri: \"https://traveldevvlad.herokuapp.com/graphql\"\r\n// });\r\n\r\n\r\nfunction ListOfUsers() {\r\n    const { loading, error, data } = useQuery(query);\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n\r\n\r\n\r\n    return data.users.map(({ id, name, age }) => (\r\n        <div key={id}>\r\n            <p>\r\n                {name}{age}\r\n            </p>\r\n        </div>\r\n    ));\r\n\r\n}\r\n\r\nexport function Users() {\r\n    return (\r\n        <div>\r\n            <ListOfUsers></ListOfUsers>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Users } from \"../Users/Users\";\r\n\r\n\r\nexport const Admin: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Users />\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport _404 from \"../../images/404.png\";\r\n\r\nexport const PageNotFound: React.FC = () => {\r\n    const cssStyel = {\r\n        text: {\r\n            fontFamily: \"Arial, Helvetica, sans-serif\",\r\n            fontSize: \"70px\"\r\n        },\r\n        image: {\r\n            marginTop: \"20px\"\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div style={cssStyel.text}>\r\n                404\r\n                </div>\r\n            <div style={cssStyel.text}>\r\n                Page not found\r\n                </div>\r\n            <div style={cssStyel.image}>\r\n                <img src={_404} alt=\"Logo\" height=\"200px\"></img>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { Header } from \"../Header/Header\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Home } from \"../Home/Home\";\r\nimport { Admin } from \"../Admin/Admin\";\r\nimport { PageNotFound } from \"../PageNotFound/PageNotFound\";\r\n\r\nexport const Main = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Router>\r\n                <Header />\r\n                <Switch>\r\n                    <Route path={[\"/\", \"/home\"]} exact component={Home} />\r\n                    <Route path={\"/admin\"} exact component={Admin} />\r\n                    <Route path={\"*\"} component={PageNotFound} />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Main } from \"./components/Main/Main\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider, useQuery, useMutation, } from \"@apollo/react-hooks\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://traveldevvlad.herokuapp.com/graphql\"\r\n});\r\n\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <div className=\"App\">\r\n        <Main />\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}